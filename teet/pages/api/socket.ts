import { Server } from "socket.io";
import { NextApiRequest, NextApiResponse } from "next";
import { assistant } from "../../connectPinecone";
import prisma from "../../prismaClient";

// –ú–µ—Å—Å–µ–∂–∏–π–Ω –∏–Ω—Ç–µ—Ä—Ñ—ç–π—Å
interface ChatMessage {
  content: string;
  room: string | number;
  received: boolean;
  userId: number;
}

// Socket.io-—Ç–∞–π extended response type
type NextApiResponseWithSocket = NextApiResponse & {
  socket: {
    server: any & {
      io?: Server;
    };
  };
};

const SocketHandler = (req: NextApiRequest, res: NextApiResponseWithSocket) => {
  // Socket —Å–µ—Ä–≤–µ—Ä –∞–ª—å —Ö—ç–¥–∏–π–Ω –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
  if (res.socket.server.io) {
    console.log("Socket –∞–ª—å —Ö—ç–¥–∏–π–Ω –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞");
    res.end();
    return;
  }

  console.log("Socket —ç—Ö–ª“Ø“Ø–ª–∂ –±–∞–π–Ω–∞");

  // Socket.IO —Å–µ—Ä–≤–µ—Ä–∏–π–≥ “Ø“Ø—Å–≥—ç—Ö
  const io = new Server(res.socket.server, {
    path: "/api/socket",
    cors: {
      origin: ["https://ai-frontend-ruby.vercel.app", "http://localhost:3000"],
      methods: ["GET", "POST"],
      credentials: true,
    },
    transports: ["websocket", "polling"], // Transport –∞—Ä–≥—É—É–¥—ã–≥ —Ç–æ–¥–æ—Ä—Ö–æ–π–ª–æ—Ö
  });

  res.socket.server.io = io;

  // Socket —Ö–æ–ª–±–æ–ª—Ç—ã–Ω event listener-“Ø“Ø–¥
  io.on("connection", (socket) => {
    console.log("‚úÖ –•—ç—Ä—ç–≥–ª—ç–≥—á —Ö–æ–ª–±–æ–≥–¥–ª–æ–æ:", socket.id);

    // ”®—Ä”©”©–Ω–¥ –æ—Ä–æ—Ö
    socket.on("join_room", (roomId: string) => {
      socket.join(roomId);
      console.log(`üö™ –•—ç—Ä—ç–≥–ª—ç–≥—á ${socket.id} ${roomId} ”©—Ä”©”©–Ω–¥ –æ—Ä–ª–æ–æ`);
    });

    // –ß–∞—Ç –º–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
    socket.on("chatMessage", async (msg: ChatMessage) => {
      try {
        console.log("üí¨ –ú–µ—Å—Å–µ–∂ —Ö“Ø–ª—ç—ç–Ω –∞–≤–ª–∞–∞:", msg);

        // –ë—É—Å–∞–¥ —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥—ç–¥ –º–µ—Å—Å–µ–∂ –∏–ª–≥—ç—ç—Ö
        socket.to(msg.room.toString()).emit("chatMessage", {
          content: msg.content,
          received: msg.received,
          userId: msg.userId,
          room: msg.room,
          timestamp: new Date().toISOString(),
        });

        // AI —Ö–∞—Ä–∏—É–ª—Ç –∞–≤–∞—Ö
        const chatResp = await assistant.chat({
          messages: [{ role: "user", content: msg.content }],
          model: "gpt-4o",
        });

        const aiResponse =
          chatResp.message?.content || "–£—É—á–ª–∞–∞—Ä–∞–π, —Ö–∞—Ä–∏—É–ª—Ç –æ–ª–¥—Å–æ–Ω–≥“Ø–π.";

        // AI —Ö–∞—Ä–∏—É–ª—Ç—ã–≥ –∏–ª–≥—ç—ç–≥—á–∏–¥ –±—É—Ü–∞–∞–∂ –∏–ª–≥—ç—ç—Ö
        socket.emit("chatMessage", {
          content: aiResponse,
          room: msg.room,
          received: true,
          userId: 1, // AI-–∏–π–Ω ID
          timestamp: new Date().toISOString(),
          isAI: true,
        });

        // ”®–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω —Ä—É—É —Ö–∞–¥–≥–∞–ª–∞—Ö (–∑”©–≤—Ö”©–Ω –∞–∂–∏–ª—Ç–Ω—É—É–¥)
        const user = await prisma.user.findUnique({
          where: { id: msg.userId },
        });

        if (user?.role === "EMPLOYEE") {
          try {
            // –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –º–µ—Å—Å–µ–∂–∏–π–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö
            await prisma.message.create({
              data: {
                conversationId: msg.userId,
                content: msg.content,
                received: msg.received,
              },
            });

            // AI —Ö–∞—Ä–∏—É–ª—Ç—ã–≥ —Ö–∞–¥–≥–∞–ª–∞—Ö
            await prisma.message.create({
              data: {
                conversationId: msg.userId,
                content: aiResponse,
                received: true,
                answered: !aiResponse.match(
                  /clarify|–æ–ª–¥—Å–æ–Ω–≥“Ø–π|—É—É—á–ª–∞–∞—Ä–∞–π|–£—É—á–ª–∞–∞—Ä–∞–π|—Ç–æ–¥—Ä—É—É–ª–∞—Ö/i
                ),
              },
            });

            console.log("üíæ –ú–µ—Å—Å–µ–∂“Ø“Ø–¥ –∞–º–∂–∏–ª—Ç—Ç–∞–π —Ö–∞–¥–≥–∞–ª–∞–≥–¥–ª–∞–∞");
          } catch (dbError) {
            console.error("‚ùå ”®–≥”©–≥–¥–ª–∏–π–Ω —Å–∞–Ω–≥–∏–π–Ω –∞–ª–¥–∞–∞:", dbError);
          }
        }
      } catch (error) {
        console.error("‚ùå –ß–∞—Ç –º–µ—Å—Å–µ–∂ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:", error);

        // –ê–ª–¥–∞–∞–Ω—ã –º–µ—Å—Å–µ–∂–∏–π–≥ –∫–ª–∏–µ–Ω—Ç —Ä“Ø“Ø –∏–ª–≥—ç—ç—Ö
        socket.emit("chatMessage", {
          content: "–£—É—á–ª–∞–∞—Ä–∞–π, —Ç–∞–Ω—ã –º–µ—Å—Å–µ–∂–∏–π–≥ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.",
          room: msg.room,
          received: true,
          userId: 1,
          error: true,
          timestamp: new Date().toISOString(),
        });
      }
    });

    // –•–æ–ª–±–æ–ª—Ç —Ç–∞—Å—Ä–∞—Ö
    socket.on("disconnect", (reason) => {
      console.log("‚ùå –•—ç—Ä—ç–≥–ª—ç–≥—á —Å–∞–ª–≥–∞–ª–∞–∞:", socket.id, "–®–∞–ª—Ç–≥–∞–∞–Ω:", reason);
    });

    // –ê–ª–¥–∞–∞ –±–æ–ª–æ–≤—Å—Ä—É—É–ª–∞—Ö
    socket.on("error", (error) => {
      console.error("‚ùå Socket –∞–ª–¥–∞–∞:", error);
    });
  });

  console.log("‚úÖ Socket —Å–µ—Ä–≤–µ—Ä –∞–º–∂–∏–ª—Ç—Ç–∞–π —ç—Ö—ç–ª–ª—ç—ç");
  res.end();
};

export default SocketHandler;
